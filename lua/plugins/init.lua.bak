return {
    -- Statusline
    {
        "nvim-lualine/lualine.nvim",
        dependencies = { "nvim-tree/nvim-web-devicons" },
        opts = {
            options = {
                theme = 'catppuccin',
                icons_enabled = false,
                component_separators = "",
                section_separators = { left = "", right = "" },
                ignore_focus = { "NvimTree" },
                refresh = {
                    statusline = 1000,
                    tabline = 1000,
                    winbar = 1000,
                },
                globalstatus = false,
            },
            sections = {
                lualine_a = {
                    {
                        "mode",
                        separator = { left = "", right = "" },
                    },

                },
                lualine_b = {
                },
                lualine_c = {
                    "progress",
                    "location",
                    {
                        "diagnostics",
                        icons_enabled = true,
                    },


                },
                lualine_x = {
                    -- {
                    --     "fileformat",
                    --     icons_enabled = false,
                    -- },
                    -- "encoding",
                    {
                        "diff",
                        colored = true,
                        symbols = { added = " ", modified = " ", removed = " " },
                        source = nil,
                    },

                    {
                        "branch",
                        icons_enabled = true,
                        icon = "",
                    },
                },
                lualine_y = {
                    {
                        "filetype",
                        icons_enabled = true,
                        colored = false,
                        icon = { align = "right" },
                    },

                    {
                        "filename",
                        path = 4,
                    },


                },
                lualine_z = {
                },
            },
            inactive_sections = {
                lualine_a = {},
                lualine_b = {},
                lualine_c = { "filename" },
                lualine_x = { "location" },
                lualine_y = {},
                lualine_z = {},
            },
        },
    },

    -- File explorer
    {
        "nvim-tree/nvim-tree.lua",
        dependencies = { "nvim-tree/nvim-web-devicons" },
        config = function()
            require("nvim-tree").setup({
                hijack_netrw = true,
                auto_reload_on_write = true,
                sort = {
                    sorter = "case_sensitive",
                },
                view = {
                    width = 27,
                },
                renderer = {
                    group_empty = true,
                },
                filters = {
                    dotfiles = true,
                },
            })
        end,
    },

    -- Syntax highlighting
    {
        "nvim-treesitter/nvim-treesitter",
        build = ":TSUpdate",
        config = function()
            local configs = require("nvim-treesitter.configs")

            configs.setup({
                sync_install = false,
                highlight = { enable = true },
                indent = { enable = true },
            })
        end,
    },

    -- LSPs and DAPs
    {
        "williamboman/mason.nvim",
        config = function()
            require("mason").setup()
        end,
    },

    {
        "mfussenegger/nvim-jdtls",
        dependencies = {
            "mfussenegger/nvim-dap"
        }
    },

    {
        "jay-babu/mason-nvim-dap.nvim",
        config = function()
            require("mason-nvim-dap").setup()
        end
    },

    {
        "mfussenegger/nvim-dap",
        dependencies = {
            "rcarriga/nvim-dap-ui",
            "nvim-neotest/nvim-nio"
        },
        config = function()
            local dap = require("dap")
            local dapui = require("dapui")

            dapui.setup()

            dap.listeners.before.launch.dapui_config = function()
                dapui.open()
            end

            dap.listeners.after.event_initialized["dapui_config"] = function()
                dapui.open()
            end

            dap.listeners.before.event_terminated["dapui_config"] = function()
                dapui.close()
            end

            dap.listeners.before.event_exited["dapui_config"] = function()
                dapui.close()
            end

            vim.keymap.set("n", "<leader>dt", dap.toggle_breakpoint, { desc = "[D]ebug [T]oggle breakpoint" })

            vim.keymap.set("n", "<leader>ds", dap.continue, { desc = "[D]ebug [S]tart" })

            vim.keymap.set("n", "<leader>dc", dap.close, { desc = "[D]ebug [C]lose" })

            -- require "config.dap"
        end
    },

    -- {
    --     "neovim/nvim-lspconfig",
    --     dependencies = { "ray-x/lsp_signature.nvim", "hrsh7th/cmp-nvim-lsp" },
    --     config = function()
    --         require("config.lspconfig")
    --         vim.keymap.set("n", "<leader>ch", vim.lsp.buf.hover, { desc = "[C]ode [H]over documentation" })
    --         vim.keymap.set("n", "<leader>cd", vim.lsp.buf.definition, { desc = "[C]ode goto [D]efinition" })
    --         vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, { desc = "[C]ode [A]ctions" })
    --         vim.keymap.set("n", "<leader>cr", require("telescope.builtin").lsp_references,
    --             { desc = "[C]ode goto [R]eferences" })
    --         vim.keymap.set("n", "<leader>ci", require("telescope.builtin").lsp_implementations,
    --             { desc = "[C]ode goto [I]mplementations" })
    --         vim.keymap.set("n", "<leader>cR", vim.lsp.buf.rename, { desc = "[C]ode [R]ename" })
    --         vim.keymap.set("n", "<leader>cD", vim.lsp.buf.declaration, { desc = "[C]ode goto [D]eclaration" })
    --     end,
    -- },

    {
        "L3MON4D3/LuaSnip",
        dependencies = {
            "rafamadriz/friendly-snippets"
        },
        version = "v2.*",
        build = "make install_jsregexp",
    },

    -- Completions

    {
        'saghen/blink.cmp',
        -- optional: provides snippets for the snippet source
        dependencies = { 'rafamadriz/friendly-snippets' },

        -- use a release tag to download pre-built binaries
        version = '1.*',
        -- AND/OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust
        -- build = 'cargo build --release',
        -- If you use nix, you can build from source using latest nightly rust with:
        -- build = 'nix run .#build-plugin',

        ---@module 'blink.cmp'
        ---@type blink.cmp.Config
        opts = {
            -- 'default' (recommended) for mappings similar to built-in completions (C-y to accept)
            -- 'super-tab' for mappings similar to vscode (tab to accept)
            -- 'enter' for enter to accept
            -- 'none' for no mappings
            --
            -- All presets have the following mappings:
            -- C-space: Open menu or open docs if already open
            -- C-n/C-p or Up/Down: Select next/previous item
            -- C-e: Hide menu
            -- C-k: Toggle signature help (if signature.enabled = true)
            --
            -- See :h blink-cmp-config-keymap for defining your own keymap
            keymap = { preset = 'default' },

            appearance = {
                -- 'mono' (default) for 'Nerd Font Mono' or 'normal' for 'Nerd Font'
                -- Adjusts spacing to ensure icons are aligned
                nerd_font_variant = 'mono'
            },

            -- (Default) Only show the documentation popup when manually triggered
            completion = {
                menu = { border = 'single' },
                documentation = { auto_show = true }
            },

            -- Default list of enabled providers defined so that you can extend it
            -- elsewhere in your config, without redefining it, due to `opts_extend`
            sources = {
                default = { 'lsp', 'path', 'snippets', 'buffer' },
            },

            -- (Default) Rust fuzzy matcher for typo resistance and significantly better performance
            -- You may use a lua implementation instead by using `implementation = "lua"` or fallback to the lua implementation,
            -- when the Rust fuzzy matcher is not available, by using `implementation = "prefer_rust"`
            --
            -- See the fuzzy documentation for more information
            fuzzy = { implementation = "prefer_rust_with_warning" }
        },
        opts_extend = { "sources.default" }
    },

    -- {
    --     "hrsh7th/nvim-cmp",
    --     event = "InsertEnter",
    --     dependencies = { "hrsh7th/cmp-buffer", "saadparwaiz1/cmp_luasnip", "hrsh7th/cmp-path" },
    --     config = function()
    --         local cmp = require("cmp")
    --         local luasnip = require("luasnip")
    --         require("luasnip.loaders.from_vscode").lazy_load()
    --         cmp.setup({
    --             completion = {
    --                 completeopt = "menu,menuone,preview"
    --             },
    --             snippet = {
    --                 expand = function(args)
    --                     luasnip.lsp_expand(args.body)
    --                 end
    --             },
    --             mapping = cmp.mapping.preset.insert({
    --                 ["<C-k>"] = cmp.mapping.select_prev_item(),
    --                 ["<C-j>"] = cmp.mapping.select_next_item(),
    --                 ["<C-b>"] = cmp.mapping.scroll_docs(-4),
    --                 ["<C-f>"] = cmp.mapping.scroll_docs(4),
    --                 ["<C-Spc>"] = cmp.mapping.complete(),
    --                 ["<C-x>"] = cmp.mapping.abort(),
    --                 ["<CR>"] = cmp.mapping.confirm({ select = false })
    --             }),
    --             sources = cmp.config.sources({
    --                 { name = "nvim_lsp" },
    --                 { name = "luasnip" },
    --                 { name = "buffer" },
    --                 { name = "path" },
    --                 { name = "vim-dadbod-completion" },
    --             }),
    --         })
    --     end,
    -- },

    -- Formatter
    {
        "stevearc/conform.nvim",
        event = "BufWritePre",
        config = function()
            require("config.conformconfig")
        end,
    },

    -- Snapshot
    {
        "michaelrommel/nvim-silicon",
        lazy = true,
        cmd = "Silicon",
        config = function()
            require("nvim-silicon").setup({
                font = "Jetbrains Mono Nerd Font=34;Noto Color Emoji=34",
                theme = "Material-Darker",
                background = "#FAFAFA",
                window_title = function()
                    return vim.fn.fnamemodify(vim.api.nvim_buf_get_name(vim.api.nvim_get_current_buf()), ":t")
                end,
                to_clipboard = true,
                output = "~/Pictures/Screenshots/code.png",
                shadow_blur_radius = 20,
                shadow_color = "#2A343980",
                shadow_offset_x = 0,
                shadow_offset_y = 0,
                line_offset = function(args)
                    return args.line1
                end,
            })
        end,
    },

    -- Markdown support
    {
        "MeanderingProgrammer/render-markdown.nvim",
        opts = {},
        dependencies = { "nvim-treesitter/nvim-treesitter", "nvim-tree/nvim-web-devicons" },
    },

    {
        "iamcco/markdown-preview.nvim",
        cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
        ft = { "markdown" },
        build = function(plugin)
            if vim.fn.executable("npx") then
                vim.cmd("!cd " .. plugin.dir .. " && cd app && npx --yes yarn install")
            else
                vim.cmd([[Lazy load markdown-preview.nvim]])
                vim.fn["mkdp#util#install"]()
            end
        end,
        init = function()
            if vim.fn.executable("npx") then
                vim.g.mkdp_filetypes = { "markdown" }
            end
        end,
    },

    -- Yuck support
    {
        "elkowar/yuck.vim",
    },

    -- Color support
    {
        "NvChad/nvim-colorizer.lua",
        config = function()
            require("colorizer").setup({
                user_default_options = {
                    tailwind = true,
                    mode = 'virtualtext',
                    virtualtext = '󱓻'
                }
            })
        end,
    },

    -- Vim-tmux sync
    {
        "christoomey/vim-tmux-navigator",
        cmd = {
            "TmuxNavigateLeft",
            "TmuxNavigateDown",
            "TmuxNavigateUp",
            "TmuxNavigateRight",
            "TmuxNavigatePrevious",
        },
        keys = {
            { "<c-h>",  "<cmd><C-U>TmuxNavigateLeft<cr>" },
            { "<c-j>",  "<cmd><C-U>TmuxNavigateDown<cr>" },
            { "<c-k>",  "<cmd><C-U>TmuxNavigateUp<cr>" },
            { "<c-l>",  "<cmd><C-U>TmuxNavigateRight<cr>" },
            { "<c-\\>", "<cmd><C-U>TmuxNavigatePrevious<cr>" },
        },
    },

    -- Better indentation
    {
        "lukas-reineke/indent-blankline.nvim",
        main = "ibl",
        config = function()
            require("ibl").setup()
        end,
        opts = {},
    },

    -- Fuzzy search
    {
        "nvim-telescope/telescope.nvim",
        tag = "0.1.8",
        dependencies = { "nvim-lua/plenary.nvim", "BurntSushi/ripgrep" },
        config = function()
            local builtin = require('telescope.builtin')
            vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = "[F]ind [F]iles" })
            vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = "[F]ind by [G]rep" })
            vim.keymap.set('n', '<leader>fd', builtin.diagnostics, { desc = "[F]ind [D]iagnostics" })
            vim.keymap.set('n', '<leader>fr', builtin.resume, { desc = "[F]ind [R]esume" })
            vim.keymap.set('n', '<leader>fo', builtin.oldfiles, { desc = "[F]ind [O]ld files" })
            vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = "[F]ind existing [B]uffers" })
        end
    },

    {
        "nvim-telescope/telescope-ui-select.nvim",
        config = function()
            local actions = require("telescope.actions")
            require("telescope").setup({
                defaults = {
                    layout_config = {
                        horizontal = {
                            preview_cutoff = 0,
                        },
                    },
                },
                extensions = {
                    ["ui-select"] = {
                        require("telescope.themes").get_dropdown {}
                    }
                },
                mappings = {
                    i = {
                        ["<C-n>"] = actions.cycle_history_next,
                        ["<C-p>"] = actions.cycle_history_prev,
                        ["<C-j>"] = actions.move_selection_next,
                        ["<C-k>"] = actions.move_selection_previous,
                    }
                },
                require("telescope").load_extension("ui-select")
            })
        end
    },

    -- Autosaves and previews
    -- {
    --     "brianhuster/autosave.nvim",
    --     lazy = false,
    --     event = "InsertEnter",
    --     config = function()
    --         local opts = {
    --             command = "Autosave",
    --             toggle_arg = "toggle",
    --             status_arg = "status",
    --         }
    --
    --         local function toggle_autosave_if_in_nvim_config(command, toggle_arg)
    --             local cwd = vim.fn.getcwd()
    --
    --             local home = vim.fn.expand("~")
    --
    --             local nvim_config_dir = home .. "/.config/nvim"
    --             local eww_config_dir = home .. "/.config/eww"
    --             local hypr_config_dir = home .. "/.config/hypr"
    --
    --
    --             if cwd:sub(1, #nvim_config_dir) == nvim_config_dir then
    --                 vim.cmd(command .. " " .. toggle_arg)
    --             end
    --
    --             if cwd:sub(1, #eww_config_dir) == eww_config_dir then
    --                 vim.cmd(command .. " " .. toggle_arg)
    --             end
    --
    --             if cwd:sub(1, #hypr_config_dir) == hypr_config_dir then
    --                 vim.cmd(command .. " " .. toggle_arg)
    --             end
    --         end
    --         toggle_autosave_if_in_nvim_config(opts.command, opts.toggle_arg)
    --     end
    -- },
    --
    -- {
    --     "brianhuster/live-preview.nvim",
    --     dependencies = { "brianhuster/autosave.nvim" },
    --     config = function()
    --         require("live-preview").setup({
    --             commands = {
    --                 start = "LivePreview",
    --                 stop = "StopPreview",
    --             },
    --             port = 5500,
    --             browser = "thorium-browser",
    --         })
    --     end,
    -- },
    --
    -- Database support
    {
        'kristijanhusak/vim-dadbod-ui',
        dependencies = {
            { 'tpope/vim-dadbod',                     lazy = true },
            { 'kristijanhusak/vim-dadbod-completion', ft = { 'sql', 'mysql', 'plsql' }, lazy = true },
        },
        cmd = {
            'DBUI',
            'DBUIToggle',
            'DBUIAddConnection',
            'DBUIFindBuffer',
        },
        init = function()
            vim.g.db_ui_use_nerd_fonts = 1
        end,
    },

    -- Colorschemes
    -- {
    -- 'sainnhe/sonokai',
    -- lazy = false,
    -- priority = 1000,
    -- config = function()
    --     vim.g.sonokai_style = 'andromeda'
    --     vim.g.sonokai_better_performance = 1
    --     vim.g.sonokai_enable_italic = true
    --     vim.cmd.colorscheme('sonokai')
    -- end
    -- },

    -- {
    --     "olimorris/onedarkpro.nvim",
    --     config = function()
    --         require("onedarkpro").setup({
    --             transparent_background = false,
    --             terminal_colors = true,
    --             devicons = true,
    --
    --             styles = {
    --                 types = "NONE",
    --                 methods = "NONE",
    --                 numbers = "NONE",
    --                 strings = "NONE",
    --                 comments = "italic",
    --                 keywords = "bold,italic",
    --                 constants = "NONE",
    --                 functions = "italic",
    --                 operators = "NONE",
    --                 variables = "NONE",
    --                 parameters = "NONE",
    --                 conditionals = "italic",
    --                 virtual_text = "NONE",
    --             },
    --
    --             filter = "pro",
    --             inc_search = "background",
    --
    --             background_clear = {
    --                 "toggleterm",
    --                 "telescope",
    --                 "which-key",
    --                 "nvim-tree",
    --             },
    --
    --             plugins = {
    --                 indentline = {
    --                     context_highlight = "pro",
    --                     context_start_underline = true,
    --                 }
    --             }
    --         })
    --         vim.cmd([[colorscheme onedark]])
    --     end
    -- },

    {
        "catppuccin/nvim",
        name = "catppuccin",
        priority = 1000,
        config = function()
            require("catppuccin").setup({
                flavour = "latte",
                transparent_background = false, -- disables setting the background color.
                show_end_of_buffer = false,     -- shows the '~' characters after the end of buffers
                term_colors = false,            -- sets terminal colors (e.g. `g:terminal_color_0`)
                no_italic = false,              -- Force no italic
                no_bold = false,                -- Force no bold
                no_underline = false,           -- Force no underline
                styles = {                      -- Handles the styles of general hi groups (see `:h highlight-args`):
                    comments = { "italic" },    -- Change the style of comments
                    conditionals = { "italic" },
                    loops = {},
                    functions = {},
                    keywords = {},
                    strings = {},
                    variables = {},
                    numbers = {},
                    booleans = {},
                    properties = {},
                    types = {},
                    operators = {},
                    -- miscs = {}, -- Uncomment to turn off hard-coded styles
                },
                color_overrides = {},
                custom_highlights = {},
                default_integrations = true,
                integrations = {
                    cmp = true,
                    gitsigns = true,
                    nvimtree = true,
                    treesitter = true,
                    notify = false,
                    mini = {
                        enabled = true,
                        indentscope_color = "",
                    },
                    -- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim#integrations)
                    harpoon = false,
                    indent_blankline = {
                        enabled = true,
                        scope_color = "", -- catppuccin color (eg. `lavender`) Default: text
                        colored_indent_levels = false,
                    },
                    telescope = {
                        enabled = true,
                        -- style = "nvchad"
                    },
                    which_key = false
                },
            })
            vim.cmd([[colorscheme catppuccin]])
        end
    },

    {
        "easymotion/vim-easymotion"
    },

    -- Springboot support
    -- {
    --     "elmcgill/springboot-nvim",
    --     dependencies = {
    --         "neovim/nvim-lspconfig",
    --         "mfussenegger/nvim-jdtls"
    --     },
    --     config = function()
    --         local springboot_nvim = require("springboot-nvim")
    --
    --         vim.keymap.set('n', '<leader>Jr', springboot_nvim.boot_run, { desc = '[J]ava [R]un Spring Boot' })
    --         vim.keymap.set('n', '<leader>Jc', springboot_nvim.generate_class, { desc = "[J]ava create [C]lass" })
    --         vim.keymap.set('n', '<leader>Ji', springboot_nvim.generate_interface, { desc = "[J]ava create [I]nterface" })
    --         vim.keymap.set('n', '<leader>Je', springboot_nvim.generate_enum, { desc = "[J]ava create [E]num" })
    --
    --         springboot_nvim.setup({})
    --     end
    -- },

    -- Autopairs
    -- {
    --     "windwp/nvim-autopairs",
    --     event = { "InsertEnter" },
    --     dependencies = {
    --         "hrsh7th/nvim-cmp",
    --     },
    --     config = function()
    --         require("nvim-autopairs").setup({
    --             check_ts = true,
    --             ts_config = {
    --                 lua = { "string" },
    --                 javascript = { "template_string" },
    --                 java = false,
    --             }
    --         })
    --
    --         local cmp_autopairs = require("nvim-autopairs.completion.cmp")
    --         local cmp = require("cmp")
    --
    --         cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
    --     end
    -- },

    -- Git support
    {
        "lewis6991/gitsigns.nvim",
        config = function()
            require("gitsigns").setup({
                watch_gitdir = {
                    interval = 1000,
                    follow_files = true,
                },
                attach_to_untracked = true,
                current_line_blame_formatter = "<author>, <author_time:%Y-%m-%d> - <summary>",
                update_debounce = 200,
                max_file_length = 40000,
                preview_config = {
                    border = "rounded",
                    style = "minimal",
                    relative = "cursor",
                    row = 0,
                    col = 1,
                },
            })

            vim.keymap.set("n", "<leader>gh", ":Gitsigns preview_hunk<CR>", { desc = "[G]it preview [H]unk" })
        end
    },

    {
        "tpope/vim-fugitive",
        config = function()
            vim.keymap.set("n", "<leader>gb", ":Git blame<CR>", { desc = "[G]it [B]lame" })
            vim.keymap.set("n", "<leader>gA", ":Git add .<CR>", { desc = "[G]it [A]dd all" })
            vim.keymap.set("n", "<leader>ga", ":Git add<CR>", { desc = "[G]it [A]dd" })
            vim.keymap.set("n", "<leader>gc", ":Git commit", { desc = "[G]it [C]ommit" })
            vim.keymap.set("n", "<leader>gp", ":Git push", { desc = "[G]it [P]ush" })
        end
    },

    -- Keymap support
    {
        "folke/which-key.nvim",
        event = "VimEnter",
        config = function()
            local which_key = require("which-key")

            which_key.setup()

            which_key.add({
                { "<leader>/", group = "Comments" }, { "<leader>/_", hidden = true },
                { "<leader>J", group = "[J]ava" }, { "<leader>J_", hidden = true },
                { "<leader>c", group = "[C]ode" }, { "<leader>c_", hidden = true },
                { "<leader>d", group = "[D]ebug" }, { "<leader>d_", hidden = true },
                { "<leader>e", group = "[E]xplorer" }, { "<leader>e_", hidden = true },
                { "<leader>f", group = "[F]ind" }, { "<leader>f_", hidden = true },
                { "<leader>g", group = "[G]it" }, { "<leader>g_", hidden = true },
                { "<leader>w", group = "[W]indow" }, { "<leader>w_", hidden = true },

            })
        end
    },

    -- Faster navigation
    {
        "ThePrimeagen/harpoon",
        event = "VeryLazy",
        dependencies = {
            "nvim-lua/plenary.nvim"
        },
        config = function()
            vim.keymap.set("n", "<S-m>", "<cmd>lua require('harpoon.mark').add_file()<CR>",
                { desc = "Harpoon Mark file" })
            vim.keymap.set("n", "<TAB>", "<cmd>lua require('harpoon.ui').toggle_quick_menu()<CR>",
                { desc = "Harpoon Toggle menu" })
        end
    },

    -- Comment support
    {
        "numToStr/Comment.nvim",
        event = { "BufReadPre", "BufNewFile"
        },
        dependencies = {
            "JoosepAlviste/nvim-ts-context-commentstring"
        },
        config = function()
            vim.keymap.set('n', '<leader>/', '<Plug>(comment_toggle_linewise_current)', { desc = "Comment Line" })
            vim.keymap.set('v', '<leader>/', '<Plug>(comment_toggle_linewise_current)', { desc = "Comment Selected" })

            local comment = require("Comment")
            local ts_context_comment_string = require("ts_context_commentstring.integrations.comment_nvim")

            comment.setup({
                pre_hook = ts_context_comment_string.create_pre_hook()
            })
        end
    },

    -- Maven support
    {
        "eatgrass/maven.nvim",
        cmd = { "Maven", "MavenExec" },
        dependencies = "nvim-lua/plenary.nvim",
        config = function()
            require('maven').setup({
                executable = "mvn"
            })
        end
    },

    -- Linting
    -- {
    --     "mfussenegger/nvim-lint",
    --     event = "VeryLazy",
    --     config = function()
    --         require "config.lint"
    --     end
    -- }
}
